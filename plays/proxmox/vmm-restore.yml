# Creates a backup of a VM host based on:
#   https://pve.proxmox.com/wiki/Proxmox_VE_2.0_Cluster#Re-installing_a_cluster_node
---
- name: Collect data from all hosts
  hosts: vmm
  become: yes
  vars_prompt:
  - name: restore_ts
    prompt: "This destorys a node.  Enter restore timestamp suffix from backup file"
    private: false
  vars:
    backup_dir: "/mnt/pve/vm-backup/hosts"
  tasks:
  - name: Check that the PVE restore file exists
    vars:
    stat:
      path: "{{ backup_dir }}/pve-{{ ansible_host }}-{{ restore_ts }}.tar.gz"
    register: backup_pve_file

  - name: Require the PVE restore file exists
    assert:
      fail_msg: "File does not exist: {{ backup_pve_file.stat.path }}"
      that: "{{ backup_pve_file.stat.exists }}"

  - name: Check that the SSH restore file exists
    stat:
      path: "{{ backup_dir }}/ssh-{{ ansible_host }}-{{ restore_ts }}.tar.gz"
    register: backup_ssh_file

  - name: Require the SSH restore file exists
    assert:
      fail_msg: "File does not exist: {{ backup_ssh_file.stat.path }}"
      that: "{{ backup_ssh_file.stat.exists }}"

  # Phase 1: Restore ssh
  - name: Stopping proxmox services
    service:
      name: "{{ item }}"
      state: stopped
    loop:
    - pvestatd
    - pvedaemon
    - corosync
    - pve-cluster

  - name: Restore ssh backup
    unarchive:
      src: "{{ backup_ssh_file.stat.path }}"
      remote_src: yes
      dest: /root/

  - name: Remove pve-cluster
    shell:
      cmd: rm -fr /var/lib/pve-cluster

  - name: Restore cluster backup
    unarchive:
      src: "{{ backup_pve_file.stat.path }}"
      remote_src: yes
      dest: /var/lib/

  - name: Restarting proxmox services
    service:
      name: "{{ item }}"
      state: started
    loop:
    - pve-cluster
    - corosync

  - name: Wait for cluster startup
    wait_for:
      path: /etc/pve/priv/authorized_keys
      timeout: 60

  - name: Create ssh symlinks
    file:
      src: "{{ item.src }}"
      dest: "{{ item.dest }}"
      state: link
      force: yes
    loop:
    - src: /etc/pve/priv/authorized_keys
      dest: /root/.ssh/authorized_keys
    - src: /etc/pve/priv/authorized_keys
      dest: /root/.ssh/authorized_keys.orig

  - name: Restarting proxmox services
    service:
      name: "{{ item }}"
      state: started
    loop:
    - pvestatd
    - pvedaemon
