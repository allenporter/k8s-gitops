# Configure container pre-requisites
# https://kubernetes.io/blog/2022/03/31/ready-for-dockershim-removal/
# https://kubernetes.io/docs/tasks/administer-cluster/migrating-from-dockershim/change-runtime-containerd/
---
- hosts: kapi,kube
  become: yes
  become_user: root
  serial: 1
  vars:
    kube_config: "{{ lookup('env','HOME') }}/.kube/{{ groups['kapi'][0] }}.config"
  tasks:
  - name: Drain node
    delegate_to: localhost
    command: "kubectl drain {{ ansible_hostname }} --ignore-daemonsets --kubeconfig={{ kube_config }} --delete-emptydir-data=true --force"

  - name: Stop kubelet
    service:
      name: kubelet
      state: stopped

  - name: Disable docker
    service:
      name: docker
      state: stopped
      enabled: false
    ignore_errors: true  # Docker may already be removed

  - name: Allow upgrades of all relevant packages
    dpkg_selections:
      name: "{{ item }}"
      selection: install
    with_items:
    - docker-ce
    - docker-ce-cli
    - containerd
    - containerd.io
    - docker-compose-plugin

  - name: Repository key
    apt_key:
      url: "{{ item }}"
      state: present
    loop:
    - https://packages.cloud.google.com/apt/doc/apt-key.gpg
    - https://download.docker.com/linux/ubuntu/gpg

  - name: Configure kubernetes repositories
    apt_repository:
      repo: "{{ item }}"
      state: present
    loop:
    - deb [arch=amd64] https://download.docker.com/linux/ubuntu focal stable
    - deb https://apt.kubernetes.io/ kubernetes-xenial main

  - name: Update sources
    apt:
      update_cache: yes

  - name: Install required containerd packages
    apt:
      name:
      - containerd.io
      state: present

  - name: Configure default containerd config
    shell: containerd config default | tee /etc/containerd/config.toml

  - name: Restart containerd
    service:
      name: containerd
      state: restarted
      enabled: true

  - name: Configure Kubelet Runtime
    copy:
      src: kubeadm-flags.env
      dest: /var/lib/kubelet/kubeadm-flags.env

  - name: Get Node Annotations
    delegate_to: localhost
    shell: "kubectl get node {{ ansible_hostname }} --kubeconfig={{ kube_config }} -o yaml | yq '.metadata.annotations'"
    register: annotation_result

  - name: Update Node annotations
    delegate_to: localhost
    shell: "kubectl annotate node {{ ansible_hostname }} kubeadm.alpha.kubernetes.io/cri-socket=unix:///run/containerd/containerd.sock --overwrite --kubeconfig={{ kube_config }}"
    when: "'dockershim.sock' in annotation_result.stdout"

  - name: Restart kubelet
    service:
      name: kubelet
      state: restarted

  - name: Remove old kubernetes packages
    apt:
      name:
      - docker.io
      - containerd
      - docker-ce
      - docker-ce-cli
      - docker-compose-plugin
      state: absent
      purge: true

  - name: Remove docker images, containers, volumes, and config
    file:
      path: /var/lib/docker
      state: absent

  - name: Prevent future accidental upgrades
    dpkg_selections:
      name: "{{ item }}"
      selection: hold
    with_items:
    - containerd.io

  - name: Restart kubelet
    service:
      name: kubelet
      state: restarted

  - name: Uncordon the node
    delegate_to: localhost
    command: "kubectl uncordon {{ ansible_hostname }} --kubeconfig={{ kube_config }}"

  - name: Verify status of the cluster
    command: "kubectl get nodes --kubeconfig={{ kube_config }}"
    register: get_nodes
    delegate_to: localhost

  - debug:
      var: get_nodes.stdout_lines
